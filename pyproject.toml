[tool.poetry]
name = "project-euler"
version = "0.1.0"
description = ""
authors = ["Alex Clerc <alex.clerc@res-group.com>"]
readme = "README.md"
packages = [{include = "project_euler"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
numpy = "^1.26.1"
num2words = "^0.5.13"

[tool.poetry.group.dev.dependencies]
ruff = "^0.1.3"
mypy = "^1.6.1"
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
poethepoet = "^0.24.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
target-version = "py311"
select = [ # see https://beta.ruff.rs/docs/rules/
  "ALL"
]
ignore = ["D","T20","PGH004"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Ignore use of `assert` in tests

[tool.mypy]
python_version = 3.11

[[tool.mypy.overrides]]
module = [
    "num2words",
]
ignore_missing_imports = true

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]

[tool.poe.tasks]
[tool.poe.tasks.lint]
help = "Runs formater and linter"
sequence = [
    { shell = "poetry run ruff format ." },
    { shell = "poetry run ruff check . --fix" },
    { shell = "poetry run mypy ." }
]

[tool.poe.tasks.lint-check]
help = "Checks formatter and linter"
sequence = [
    { shell = "poetry run ruff format . --check" },
    { shell = "poetry run ruff check ." },
    { shell = "poetry run mypy ." }
]

[tool.poe.tasks.test]
help = "Runs unit tests"
sequence = [
    { cmd = "poetry run pytest --cov=project_euler ./tests" },
]

[tool.poe.tasks.all]
help = "Run all required pre-push commands"
sequence = [{ ref = "lint" }, { ref = "test" }]